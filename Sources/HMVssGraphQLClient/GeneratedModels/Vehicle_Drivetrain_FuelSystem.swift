import Artemis

/*
 This file was generated by Artemis for the following GraphQL object:

    type Vehicle_Drivetrain_FuelSystem {
     """
     Average consumption in liters per 100 km.
     """
     averageConsumption: Float
     """
     Fuel amount consumed since start in liters.
     """
     consumptionSinceStart: Float
     """
     Indicates whether eco start stop is currently enabled
     """
     engineStopStartEnabled: Boolean
     """
     Defines the fuel type of the vehicle
     """
     fuelType: Vehicle_Drivetrain_FuelSystem_FuelType_Enum
     """
     Defines the hybrid type of the vehicle
     """
     hybridType: Vehicle_Drivetrain_FuelSystem_HybridType_Enum
     """
     Current consumption in liters per 100 km.
     """
     instantConsumption: Float
     """
     Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
     """
     level: Int
     """
     Indicates that the fuel level is low (e.g. less 50km range)
     """
     lowFuelLevel: Boolean
     """
     Range in meters.
     """
     range: Float
     """
     Capacity of the fuel tank in liters
     """
     tankCapacity: Int
     """
     Time elapsed since start in seconds.
     """
     timeSinceStart: Float
   }
*/

final class Vehicle_Drivetrain_FuelSystem: Object, ObjectSchema {

    /**
    Average consumption in liters per 100 km.
    */
    var averageConsumption = Field<Float?, NoArguments>("averageConsumption")

    /**
    Fuel amount consumed since start in liters.
    */
    var consumptionSinceStart = Field<Float?, NoArguments>("consumptionSinceStart")

    /**
    Indicates whether eco start stop is currently enabled
    */
    var engineStopStartEnabled = Field<Bool?, NoArguments>("engineStopStartEnabled")

    /**
    Defines the fuel type of the vehicle
    */
    var fuelType = Field<Vehicle_Drivetrain_FuelSystem_FuelType_Enum?, NoArguments>("fuelType")

    /**
    Defines the hybrid type of the vehicle
    */
    var hybridType = Field<Vehicle_Drivetrain_FuelSystem_HybridType_Enum?, NoArguments>("hybridType")

    /**
    Current consumption in liters per 100 km.
    */
    var instantConsumption = Field<Float?, NoArguments>("instantConsumption")

    /**
    Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
    */
    var level = Field<Int?, NoArguments>("level")

    /**
    Indicates that the fuel level is low (e.g. less 50km range)
    */
    var lowFuelLevel = Field<Bool?, NoArguments>("lowFuelLevel")

    /**
    Range in meters.
    */
    var range = Field<Float?, NoArguments>("range")

    /**
    Capacity of the fuel tank in liters
    */
    var tankCapacity = Field<Int?, NoArguments>("tankCapacity")

    /**
    Time elapsed since start in seconds.
    */
    var timeSinceStart = Field<Float?, NoArguments>("timeSinceStart")

}


public class Drivetrain_FuelSystem: Model {

    typealias PartialType = Vehicle_Drivetrain_FuelSystem

    public let averageConsumption: Float?
    public let consumptionSinceStart: Float?
    public let engineStopStartEnabled: Bool?
    public let fuelType: Drivetrain_FuelSystem_FuelType_Enum?
    public let hybridType: Drivetrain_FuelSystem_HybridType_Enum?
    public let instantConsumption: Float?
    public let level: Int?
    public let lowFuelLevel: Bool?
    public let range: Float?
    public let tankCapacity: Int?
    public let timeSinceStart: Float?

    required init?(partial: Partial<PartialType?>) {
        averageConsumption = partial.averageConsumption ?? nil
        consumptionSinceStart = partial.consumptionSinceStart ?? nil
        engineStopStartEnabled = partial.engineStopStartEnabled ?? nil
        fuelType = partial.fuelType ?? nil
        hybridType = partial.hybridType ?? nil
        instantConsumption = partial.instantConsumption ?? nil
        level = partial.level ?? nil
        lowFuelLevel = partial.lowFuelLevel ?? nil
        range = partial.range ?? nil
        tankCapacity = partial.tankCapacity ?? nil
        timeSinceStart = partial.timeSinceStart ?? nil
    }
}
