import Artemis

/*
 This file was generated by Artemis for the following GraphQL object:

    type Vehicle {
     adas: Vehicle_ADAS
     acceleration: Vehicle_Acceleration
     """
     The time needed to accelerate the vehicle from a given start velocity to a given target velocity.
     """
     accelerationTime: Int
     """
     Ambient air temperature
     """
     ambientAirTemperature: Float
     angularVelocity: Vehicle_AngularVelocity
     """
     Average speed for the current trip
     """
     averageSpeed: Float
     body: Vehicle_Body
     cabin: Vehicle_Cabin
     """
     The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
     """
     cargoVolume: Int
     chassis: Vehicle_Chassis
     """
     Accumulated drive time in seconds.
     """
     driveTime: Float
     drivetrain: Vehicle_Drivetrain
     """
     The CO2 emissions in g/km.
     """
     emissionsCO2: Int
     """
     Accumulated idle time in seconds.
     """
     idleTime: Float
     """
     Accumulated ignition off time in seconds.
     """
     ignitionOffTime: Float
     """
     Accumulated ignition on time in seconds.
     """
     ignitionOnTime: Float
     """
     Indicates whether the vehicle is stationary or moving
     """
     isMoving: Boolean
     obd: Vehicle_OBD
     """
     The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
     """
     roofLoad: Int
     """
     Vehicle speed, as sensed by the gearbox.
     """
     speed: Float
     """
     Odometer reading
     """
     travelledDistance: Float
     """
     Current trip meter reading
     """
     tripMeterReading: Float
     vehicleIdentification: Vehicle_VehicleIdentification
   }
*/

final class VehicleType: Object, ObjectSchema {

    var adas = Field<Vehicle_ADAS?, NoArguments>("adas")

    var acceleration = Field<Vehicle_Acceleration?, NoArguments>("acceleration")

    /**
    The time needed to accelerate the vehicle from a given start velocity to a given target velocity.
    */
    var accelerationTime = Field<Int?, NoArguments>("accelerationTime")

    /**
    Ambient air temperature
    */
    var ambientAirTemperature = Field<Float?, NoArguments>("ambientAirTemperature")

    var angularVelocity = Field<Vehicle_AngularVelocity?, NoArguments>("angularVelocity")

    /**
    Average speed for the current trip
    */
    var averageSpeed = Field<Float?, NoArguments>("averageSpeed")

    var body = Field<Vehicle_Body?, NoArguments>("body")

    var cabin = Field<Vehicle_Cabin?, NoArguments>("cabin")

    /**
    The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
    */
    var cargoVolume = Field<Int?, NoArguments>("cargoVolume")

    var chassis = Field<Vehicle_Chassis?, NoArguments>("chassis")

    /**
    Accumulated drive time in seconds.
    */
    var driveTime = Field<Float?, NoArguments>("driveTime")

    var drivetrain = Field<Vehicle_Drivetrain?, NoArguments>("drivetrain")

    /**
    The CO2 emissions in g/km.
    */
    var emissionsCO2 = Field<Int?, NoArguments>("emissionsCO2")

    /**
    Accumulated idle time in seconds.
    */
    var idleTime = Field<Float?, NoArguments>("idleTime")

    /**
    Accumulated ignition off time in seconds.
    */
    var ignitionOffTime = Field<Float?, NoArguments>("ignitionOffTime")

    /**
    Accumulated ignition on time in seconds.
    */
    var ignitionOnTime = Field<Float?, NoArguments>("ignitionOnTime")

    /**
    Indicates whether the vehicle is stationary or moving
    */
    var isMoving = Field<Bool?, NoArguments>("isMoving")

    var obd = Field<Vehicle_OBD?, NoArguments>("obd")

    /**
    The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
    */
    var roofLoad = Field<Int?, NoArguments>("roofLoad")

    /**
    Vehicle speed, as sensed by the gearbox.
    */
    var speed = Field<Float?, NoArguments>("speed")

    /**
    Odometer reading
    */
    var travelledDistance = Field<Float?, NoArguments>("travelledDistance")

    /**
    Current trip meter reading
    */
    var tripMeterReading = Field<Float?, NoArguments>("tripMeterReading")

    var vehicleIdentification = Field<Vehicle_VehicleIdentification?, NoArguments>("vehicleIdentification")

}


public class Vehicle: Model {

    typealias PartialType = VehicleType

    public let adas: ADAS?
    public let acceleration: Acceleration?
    public let accelerationTime: Int?
    public let ambientAirTemperature: Float?
    public let angularVelocity: AngularVelocity?
    public let averageSpeed: Float?
    public let body: Body?
    public let cabin: Cabin?
    public let cargoVolume: Int?
    public let chassis: Chassis?
    public let driveTime: Float?
    public let drivetrain: Drivetrain?
    public let emissionsCO2: Int?
    public let idleTime: Float?
    public let ignitionOffTime: Float?
    public let ignitionOnTime: Float?
    public let isMoving: Bool?
    public let obd: OBD?
    public let roofLoad: Int?
    public let speed: Float?
    public let travelledDistance: Float?
    public let tripMeterReading: Float?
    public let vehicleIdentification: VehicleIdentification?

    required init?(partial: Partial<PartialType?>) {
        adas = ADAS(partial: partial.adas)
        acceleration = Acceleration(partial: partial.acceleration)
        accelerationTime = partial.accelerationTime ?? nil
        ambientAirTemperature = partial.ambientAirTemperature ?? nil
        angularVelocity = AngularVelocity(partial: partial.angularVelocity)
        averageSpeed = partial.averageSpeed ?? nil
        body = Body(partial: partial.body)
        cabin = Cabin(partial: partial.cabin)
        cargoVolume = partial.cargoVolume ?? nil
        chassis = Chassis(partial: partial.chassis)
        driveTime = partial.driveTime ?? nil
        drivetrain = Drivetrain(partial: partial.drivetrain)
        emissionsCO2 = partial.emissionsCO2 ?? nil
        idleTime = partial.idleTime ?? nil
        ignitionOffTime = partial.ignitionOffTime ?? nil
        ignitionOnTime = partial.ignitionOnTime ?? nil
        isMoving = partial.isMoving ?? nil
        obd = OBD(partial: partial.obd)
        roofLoad = partial.roofLoad ?? nil
        speed = partial.speed ?? nil
        travelledDistance = partial.travelledDistance ?? nil
        tripMeterReading = partial.tripMeterReading ?? nil
        vehicleIdentification = VehicleIdentification(partial: partial.vehicleIdentification)
    }
}
