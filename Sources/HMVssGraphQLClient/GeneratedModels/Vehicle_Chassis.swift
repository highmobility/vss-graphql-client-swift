import Artemis

/*
 This file was generated by Artemis for the following GraphQL object:

    type Vehicle_Chassis {
     accelerator: Vehicle_Chassis_Accelerator
     axle: Vehicle_Chassis_Axle
     brake: Vehicle_Chassis_Brake
     """
     Vehicle curb weight, in kg, including all liquids and full tank of fuel, but no cargo or passengers.
     """
     curbWeight: Int
     """
     Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers.
     """
     grossWeight: Int
     """
     Overall vehicle height, in mm.
     """
     height: Int
     """
     Overall vehicle length, in mm.
     """
     length: Int
     parkingBrake: Vehicle_Chassis_ParkingBrake
     steeringWheel: Vehicle_Chassis_SteeringWheel
     """
     Maximum weight, in kilos, of trailer.
     """
     towWeight: Int
     """
     Overall wheel tracking, in mm.
     """
     track: Int
     trailer: Vehicle_Chassis_Trailer
     """
     Overall wheel base, in mm.
     """
     wheelbase: Int
     """
     Overall vehicle width, in mm.
     """
     width: Int
   }
*/

final class Vehicle_Chassis: Object, ObjectSchema {

    var accelerator = Field<Vehicle_Chassis_Accelerator?, NoArguments>("accelerator")

    var axle = Field<Vehicle_Chassis_Axle?, NoArguments>("axle")

    var brake = Field<Vehicle_Chassis_Brake?, NoArguments>("brake")

    /**
    Vehicle curb weight, in kg, including all liquids and full tank of fuel, but no cargo or passengers.
    */
    var curbWeight = Field<Int?, NoArguments>("curbWeight")

    /**
    Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers.
    */
    var grossWeight = Field<Int?, NoArguments>("grossWeight")

    /**
    Overall vehicle height, in mm.
    */
    var height = Field<Int?, NoArguments>("height")

    /**
    Overall vehicle length, in mm.
    */
    var length = Field<Int?, NoArguments>("length")

    var parkingBrake = Field<Vehicle_Chassis_ParkingBrake?, NoArguments>("parkingBrake")

    var steeringWheel = Field<Vehicle_Chassis_SteeringWheel?, NoArguments>("steeringWheel")

    /**
    Maximum weight, in kilos, of trailer.
    */
    var towWeight = Field<Int?, NoArguments>("towWeight")

    /**
    Overall wheel tracking, in mm.
    */
    var track = Field<Int?, NoArguments>("track")

    var trailer = Field<Vehicle_Chassis_Trailer?, NoArguments>("trailer")

    /**
    Overall wheel base, in mm.
    */
    var wheelbase = Field<Int?, NoArguments>("wheelbase")

    /**
    Overall vehicle width, in mm.
    */
    var width = Field<Int?, NoArguments>("width")

}


public class Chassis: Model {

    typealias PartialType = Vehicle_Chassis

    public let accelerator: Chassis_Accelerator?
    public let axle: Chassis_Axle?
    public let brake: Chassis_Brake?
    public let curbWeight: Int?
    public let grossWeight: Int?
    public let height: Int?
    public let length: Int?
    public let parkingBrake: Chassis_ParkingBrake?
    public let steeringWheel: Chassis_SteeringWheel?
    public let towWeight: Int?
    public let track: Int?
    public let trailer: Chassis_Trailer?
    public let wheelbase: Int?
    public let width: Int?

    required init?(partial: Partial<PartialType?>) {
        accelerator = Chassis_Accelerator(partial: partial.accelerator)
        axle = Chassis_Axle(partial: partial.axle)
        brake = Chassis_Brake(partial: partial.brake)
        curbWeight = partial.curbWeight ?? nil
        grossWeight = partial.grossWeight ?? nil
        height = partial.height ?? nil
        length = partial.length ?? nil
        parkingBrake = Chassis_ParkingBrake(partial: partial.parkingBrake)
        steeringWheel = Chassis_SteeringWheel(partial: partial.steeringWheel)
        towWeight = partial.towWeight ?? nil
        track = partial.track ?? nil
        trailer = Chassis_Trailer(partial: partial.trailer)
        wheelbase = partial.wheelbase ?? nil
        width = partial.width ?? nil
    }
}
