import Artemis

/*
 This file was generated by Artemis for the following GraphQL object:

   type Vehicle {
     adas: Vehicle_ADAS
     acceleration: Vehicle_Acceleration
     """
     The time needed to accelerate the vehicle from a given start velocity to a given target velocity.
     """
     accelerationTime: Int
     """
     Ambient air temperature
     """
     ambientAirTemperature: Float
     angularVelocity: Vehicle_AngularVelocity
     """
     Average speed for the current trip
     """
     averageSpeed: Float
     body: Vehicle_Body
     cabin: Vehicle_Cabin
     """
     The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
     """
     cargoVolume: Int
     chassis: Vehicle_Chassis
     """
     Accumulated drive time in seconds.
     """
     driveTime: Float
     drivetrain: Vehicle_Drivetrain
     """
     The CO2 emissions in g/km.
     """
     emissionsCO2: Int
     """
     Accumulated idle time in seconds.
     """
     idleTime: Float
     """
     Accumulated ignition off time in seconds.
     """
     ignitionOffTime: Float
     """
     Accumulated ignition on time in seconds.
     """
     ignitionOnTime: Float
     """
     Indicates whether the vehicle is stationary or moving
     """
     isMoving: Boolean
     obd: Vehicle_OBD
     """
     The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
     """
     roofLoad: Int
     """
     Vehicle speed, as sensed by the gearbox.
     """
     speed: Float
     """
     Odometer reading
     """
     travelledDistance: Float
     """
     Current trip meter reading
     """
     tripMeterReading: Float
     vehicleIdentification: Vehicle_VehicleIdentification
   }
*/


public class _Vehicle: Model {

    typealias PartialType = Vehicle

    public let acceleration: Acceleration?
    public let angularVelocity: AngularVelocity?


    required init?(partial: Partial<Vehicle?>) {
        acceleration = Acceleration(partial: partial.acceleration)
        angularVelocity = AngularVelocity(partial: partial.angularVelocity)
    }
}


final class Vehicle: Object, ObjectSchema {
    
    var adas = Field<Vehicle_ADAS?, NoArguments>("adas")
    
    var acceleration = Field<Vehicle_Acceleration?, NoArguments>("acceleration")
    
    /**
     The time needed to accelerate the vehicle from a given start velocity to a given target velocity.
     */
    var accelerationTime = Field<Int?, NoArguments>("accelerationTime")
    
    /**
     Ambient air temperature
     */
    var ambientAirTemperature = Field<Float?, NoArguments>("ambientAirTemperature")
    
    var angularVelocity = Field<Vehicle_AngularVelocity?, NoArguments>("angularVelocity")
    
    /**
     Average speed for the current trip
     */
    var averageSpeed = Field<Float?, NoArguments>("averageSpeed")
    
    var body = Field<Vehicle_Body?, NoArguments>("body")
    
    var cabin = Field<Vehicle_Cabin?, NoArguments>("cabin")
    
    /**
     The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.
     */
    var cargoVolume = Field<Int?, NoArguments>("cargoVolume")
    
    var chassis = Field<Vehicle_Chassis?, NoArguments>("chassis")
    
    /**
     Accumulated drive time in seconds.
     */
    var driveTime = Field<Float?, NoArguments>("driveTime")
    
    var drivetrain = Field<Vehicle_Drivetrain?, NoArguments>("drivetrain")
    
    /**
     The CO2 emissions in g/km.
     */
    var emissionsCO2 = Field<Int?, NoArguments>("emissionsCO2")
    
    /**
     Accumulated idle time in seconds.
     */
    var idleTime = Field<Float?, NoArguments>("idleTime")
    
    /**
     Accumulated ignition off time in seconds.
     */
    var ignitionOffTime = Field<Float?, NoArguments>("ignitionOffTime")
    
    /**
     Accumulated ignition on time in seconds.
     */
    var ignitionOnTime = Field<Float?, NoArguments>("ignitionOnTime")
    
    /**
     Indicates whether the vehicle is stationary or moving
     */
    var isMoving = Field<Bool?, NoArguments>("isMoving")
    
    var obd = Field<Vehicle_OBD?, NoArguments>("obd")
    
    /**
     The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.
     */
    var roofLoad = Field<Int?, NoArguments>("roofLoad")
    
    /**
     Vehicle speed, as sensed by the gearbox.
     */
    var speed = Field<Float?, NoArguments>("speed")
    
    /**
     Odometer reading
     */
    var travelledDistance = Field<Float?, NoArguments>("travelledDistance")
    
    /**
     Current trip meter reading
     */
    var tripMeterReading = Field<Float?, NoArguments>("tripMeterReading")
    
    var vehicleIdentification = Field<Vehicle_VehicleIdentification?, NoArguments>("vehicleIdentification")
}
