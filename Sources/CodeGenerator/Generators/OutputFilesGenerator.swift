//
//  OutputFilesGenerator.swift
//  
//
//  Created by Mikk Rätsep on 11.05.20.
//

import Combine
import Foundation


@available(OSX 10.15, *)
var _contentsPub: AnyPublisher<String, Never>!
@available(OSX 10.15, *)
var _entitiesPub: AnyPublisher<IntermediateEntity, Never>!


@available(macOS 10.15, *)
struct OutputFilesGenerator {

    let outputFilesPub: AnyPublisher<OutputFile, Never>
    private var cancellables: [AnyCancellable] = []


    init(fromContentsPub contentsPub: AnyPublisher<String, Never>,
                          entitiesPub: AnyPublisher<IntermediateEntity, Never>,
                          outputFolder: URL) throws {
        print("- creating output files...")

        let typeNamesPub = entitiesPub.map { $0.name.convertedToValidTypeName }.eraseToAnyPublisher()
        let urlsPub = typeNamesPub.map { outputFolder.appendingPathComponent($0).appendingPathExtension("swift") }.eraseToAnyPublisher()

        _contentsPub = contentsPub
        _entitiesPub = entitiesPub

        let xxxxx = _contentsPub
            .share()
            .zip(entitiesPub.share())
            .eraseToAnyPublisher()

        xxxxx.sink { val in
            print("___", val)
        }
        .store(in: &cancellables)


        // Add a header and save the file
        // TODO: Fix the date
        outputFilesPub = contentsPub
            .zip(typeNamesPub) { content, typeName -> String in
                """
                //
                //  \(typeName).swift
                //  HMVssGraphQLClient
                //
                //  Generated by HMVssGraphQL on 12.05.20.
                //  Copyright © 2020 High Mobility GmbH. All rights reserved.
                //

                \(content)
                """
            }
            .zip(urlsPub, typeNamesPub)
            .map { content, url, typeName in
                OutputFile(content: content,
                           path: url,
                           name: typeName)
            }
            .eraseToAnyPublisher()
    }
}
